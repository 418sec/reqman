{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Reqman Reqman is a postman killer. It serves the same goal, but without GUI : you can test yours http things with commandline under any os. All configurations is done via simple yaml files, editable with any text editors. Results are displayed in console and in an html output. It's scriptable, and can be used as a daemon/cron task to control your teststitle":"Introduction"},{"location":"#reqman","text":"Reqman is a postman killer. It serves the same goal, but without GUI : you can test yours http things with commandline under any os. All configurations is done via simple yaml files, editable with any text editors. Results are displayed in console and in an html output. It's scriptable, and can be used as a daemon/cron task to control your teststitle":"Reqman"},{"location":"conf/","text":"Using a reqman.conf It can be very useful to capitalize/share common things in a single place : the reqman.conf It's a yaml file (a dict) etc .. etc ...","title":"Using a global conf"},{"location":"conf/#using-a-reqmanconf","text":"It can be very useful to capitalize/share common things in a single place : the reqman.conf It's a yaml file (a dict) etc .. etc ...","title":"Using a reqman.conf"},{"location":"conf_syntax/","text":"","title":"Conf syntax"},{"location":"install/","text":"Install On nix platforms In a console: $ pip3 install reqman (should install PyYAML , httpcore & stpl dependencies) On Windows Download reqman.exe From Sources In a console: $ git clone https://github.com/manatlan/reqman.git $ pip3 install pyyaml httpcore stpl colorama","title":"Installation"},{"location":"install/#install","text":"","title":"Install"},{"location":"install/#on-nix-platforms","text":"In a console: $ pip3 install reqman (should install PyYAML , httpcore & stpl dependencies)","title":"On nix platforms"},{"location":"install/#on-windows","text":"Download reqman.exe","title":"On Windows"},{"location":"install/#from-sources","text":"In a console: $ git clone https://github.com/manatlan/reqman.git $ pip3 install pyyaml httpcore stpl colorama","title":"From Sources"},{"location":"python/","text":"Python powered Using \"params\" statement, it possible in introduce python scripts, to make you tests more powerful. (You can include all python libs available in reqman, but for others lib you should have python3 on the host with yours libs.) Can be really useful to: transform data (gzip, base64, encrypt, ...) save content compute complex data ... With param value - POST : /post body : <<content>> params : content : | with open(\"image.jpg\",\"rb\") as fid: return fid.read() With method over a param value it's like a param, but 'x' is the input parameter (ENV dict is also available) - POST : /post body : <<content|gzip>> params : content : \"hello world\" gzip : | import zlib return zlib.compress( x ) And you can chain methods like this - POST : /post body : <<content|gzip|b64>> params : content : \"hello world\" gzip : | import zlib return zlib.compress( x ) b65 : | import base64 return base64.b64encode( x ) A better place for theses methods : declare them in the reqman.conf !","title":"Python powered"},{"location":"python/#python-powered","text":"Using \"params\" statement, it possible in introduce python scripts, to make you tests more powerful. (You can include all python libs available in reqman, but for others lib you should have python3 on the host with yours libs.) Can be really useful to: transform data (gzip, base64, encrypt, ...) save content compute complex data ...","title":"Python powered"},{"location":"python/#with-param-value","text":"- POST : /post body : <<content>> params : content : | with open(\"image.jpg\",\"rb\") as fid: return fid.read()","title":"With param value"},{"location":"python/#with-method-over-a-param-value","text":"it's like a param, but 'x' is the input parameter (ENV dict is also available) - POST : /post body : <<content|gzip>> params : content : \"hello world\" gzip : | import zlib return zlib.compress( x ) And you can chain methods like this - POST : /post body : <<content|gzip|b64>> params : content : \"hello world\" gzip : | import zlib return zlib.compress( x ) b65 : | import base64 return base64.b64encode( x ) A better place for theses methods : declare them in the reqman.conf !","title":"With method over a param value"},{"location":"simple_use/","text":"Simplest use Create a yml file (ex: test.yml ) - GET : https://github.com/manatlan/reqman tests : - status : 200 And run it with reqman, in console $ reqman test.yml The console should prints: $ reqman test.yml TEST: /home/manatlan/Documents/python/reqman/test.yml * GET https://github.com/manatlan/reqman --> 200 - OK : status = 200 RESULT: 1/1 (1req(s)) Reqman has called the url and tested that HTTP status == 200, it has generated a reqman.html which contains more details about the http exchange, and it returned a RC code == 0 (no test errors)","title":"Simplest use"},{"location":"simple_use/#simplest-use","text":"Create a yml file (ex: test.yml ) - GET : https://github.com/manatlan/reqman tests : - status : 200 And run it with reqman, in console $ reqman test.yml The console should prints: $ reqman test.yml TEST: /home/manatlan/Documents/python/reqman/test.yml * GET https://github.com/manatlan/reqman --> 200 - OK : status = 200 RESULT: 1/1 (1req(s)) Reqman has called the url and tested that HTTP status == 200, it has generated a reqman.html which contains more details about the http exchange, and it returned a RC code == 0 (no test errors)","title":"Simplest use"},{"location":"yml_syntax/","text":"Reserved words HTTP VERB Known HTTP verbs : \"GET\", \"POST\", \"DELETE\", \"PUT\", \"HEAD\", \"OPTIONS\", \"TRACE\", \"PATCH\", \"CONNECT\" - OPTIONS : /hello - HEAD : /hello - GET : /hello \"body\" - POST : /hello body : \"I'm the body\" \"headers\" - POST : /hello body : \"I'm the body\" headers : content-type : text/plain x-hello : it's me \"tests\" - GET : /returnJson # return {\"result\":{\"content\":\"ok\",\"value\":3.3}} tests : - status : 200 - content-type : application/json # test a response header - json.result.content : \"ok\" - json.result.content : . != \"ko\" - json.result.content.size : 2 # test size of the string - json.result.size : 2 # test size of the dict - json.result.value : . > 3 - json.result.value : . <= 4 - content : \"result\" # ensure that the global response contains text \"result\" \"doc\" - GET : /test doc : \"Just a description which is displayed in the html output for this request\" \"params\" - GET : /<<path>> params : path : \"hello\" \"save\" Save all the response - GET : /returnJson # return {\"result\":{\"content\":\"ok\",\"value\":3.3}} save : allJson Now, you can 'allJson' in following requests Save a partial response in a new param 'rcontent' - GET : /returnJson # return {\"result\":{\"content\":\"ok\",\"value\":3.3}} save : rcontent : <<json.result.content>> now, you can 'rcontent' in following requests \"foreach\" - GET : /test/<<value>> foreach : - value : 1 - value : 2 - value : 3 Will make 3 requests \"call\" - MyProcedure : - POST : /test body : <<value>> - GET : /test tests : - content : <<value>> - call : MyProcedure params : value : 1 Reserved params: \"root\" It's the root path, which is used as prefix when request use absolute path - GET : /test params : root : https://example.com it's better to define it in the reqman.conf \"timeout\" It's the max time in ms to wait the response - call : MyProcedure params : timeout : 100 #100ms max it's better to define it in the reqman.conf In reqman.conf only: \"headers\" Global headers for all tests \"tests\" Global tests for all tests (DEPRECATED (useless?)) \"switchs\" \"BEGIN\" (procedure) It's a special procedure, which can be declared in reqman.conf only, and is called at the beginning of all tests. It can be useful to obtain an oauth2 token bearer, initiate some things, ... \"END\" (procedure) It's a special procedure, which can be declared in reqman.conf only, and is called at the end of all tests. It can be useful to clear some things after all tests, ...","title":"Grammar"},{"location":"yml_syntax/#reserved-words","text":"","title":"Reserved words"},{"location":"yml_syntax/#http-verb","text":"Known HTTP verbs : \"GET\", \"POST\", \"DELETE\", \"PUT\", \"HEAD\", \"OPTIONS\", \"TRACE\", \"PATCH\", \"CONNECT\" - OPTIONS : /hello - HEAD : /hello - GET : /hello","title":"HTTP VERB"},{"location":"yml_syntax/#body","text":"- POST : /hello body : \"I'm the body\"","title":"\"body\""},{"location":"yml_syntax/#headers","text":"- POST : /hello body : \"I'm the body\" headers : content-type : text/plain x-hello : it's me","title":"\"headers\""},{"location":"yml_syntax/#tests","text":"- GET : /returnJson # return {\"result\":{\"content\":\"ok\",\"value\":3.3}} tests : - status : 200 - content-type : application/json # test a response header - json.result.content : \"ok\" - json.result.content : . != \"ko\" - json.result.content.size : 2 # test size of the string - json.result.size : 2 # test size of the dict - json.result.value : . > 3 - json.result.value : . <= 4 - content : \"result\" # ensure that the global response contains text \"result\"","title":"\"tests\""},{"location":"yml_syntax/#doc","text":"- GET : /test doc : \"Just a description which is displayed in the html output for this request\"","title":"\"doc\""},{"location":"yml_syntax/#params","text":"- GET : /<<path>> params : path : \"hello\"","title":"\"params\""},{"location":"yml_syntax/#save","text":"","title":"\"save\""},{"location":"yml_syntax/#save-all-the-response","text":"- GET : /returnJson # return {\"result\":{\"content\":\"ok\",\"value\":3.3}} save : allJson Now, you can 'allJson' in following requests","title":"Save all the response"},{"location":"yml_syntax/#save-a-partial-response-in-a-new-param-rcontent","text":"- GET : /returnJson # return {\"result\":{\"content\":\"ok\",\"value\":3.3}} save : rcontent : <<json.result.content>> now, you can 'rcontent' in following requests","title":"Save a partial response in a new param 'rcontent'"},{"location":"yml_syntax/#foreach","text":"- GET : /test/<<value>> foreach : - value : 1 - value : 2 - value : 3 Will make 3 requests","title":"\"foreach\""},{"location":"yml_syntax/#call","text":"- MyProcedure : - POST : /test body : <<value>> - GET : /test tests : - content : <<value>> - call : MyProcedure params : value : 1","title":"\"call\""},{"location":"yml_syntax/#reserved-params","text":"","title":"Reserved params:"},{"location":"yml_syntax/#root","text":"It's the root path, which is used as prefix when request use absolute path - GET : /test params : root : https://example.com it's better to define it in the reqman.conf","title":"\"root\""},{"location":"yml_syntax/#timeout","text":"It's the max time in ms to wait the response - call : MyProcedure params : timeout : 100 #100ms max it's better to define it in the reqman.conf","title":"\"timeout\""},{"location":"yml_syntax/#in-reqmanconf-only","text":"","title":"In reqman.conf only:"},{"location":"yml_syntax/#headers_1","text":"Global headers for all tests","title":"\"headers\""},{"location":"yml_syntax/#tests_1","text":"Global tests for all tests (DEPRECATED (useless?))","title":"\"tests\""},{"location":"yml_syntax/#switchs","text":"","title":"\"switchs\""},{"location":"yml_syntax/#begin-procedure","text":"It's a special procedure, which can be declared in reqman.conf only, and is called at the beginning of all tests. It can be useful to obtain an oauth2 token bearer, initiate some things, ...","title":"\"BEGIN\" (procedure)"},{"location":"yml_syntax/#end-procedure","text":"It's a special procedure, which can be declared in reqman.conf only, and is called at the end of all tests. It can be useful to clear some things after all tests, ...","title":"\"END\" (procedure)"}]}